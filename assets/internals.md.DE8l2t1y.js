import{_ as e,c as a,o as t,a4 as r}from"./chunks/framework.D0jgnAWi.js";const g=JSON.parse('{"title":"How it works","description":"","frontmatter":{},"headers":[],"relativePath":"internals.md","filePath":"internals.md"}'),o={name:"internals.md"},s=r('<h1 id="how-it-works" tabindex="-1">How it works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How it works&quot;">â€‹</a></h1><p><a href="https://playwright.dev/docs/api/class-page" target="_blank" rel="noreferrer">Playwright Page API</a> introduces <a href="https://playwright.dev/docs/api/class-page#page-evaluate" target="_blank" rel="noreferrer"><code>page.evaluate()</code></a> and <a href="https://playwright.dev/docs/api/class-page#page-evaluate-handle" target="_blank" rel="noreferrer"><code>page.evaluateHandle()</code></a> methods that allow running arbitrary JavaScript code on the web page. These methods however do not play nicely with the essence of modern Web projects, where libraries and frameworks rely on code pre-processors.</p><p>To fill this gap, Rollwright introduces <code>execute()</code> fixture that essentially behaves like <code>page.evaluateHandle()</code> but utilizes <a href="https://rollupjs.org" target="_blank" rel="noreferrer">Rollup</a> for code pre-processing and dependency resolution and <a href="https://hono.dev" target="_blank" rel="noreferrer">Hono</a> to serve static assets to the browser automatically so you don&#39;t have to worry about additional testing infrastructure.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>ðŸš§ This guide is under construction</p></div>',4),n=[s];function l(i,c,d,p,h,u){return t(),a("div",null,n)}const f=e(o,[["render",l]]);export{g as __pageData,f as default};
