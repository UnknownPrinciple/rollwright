import{_ as e,c as t,o as i,a4 as o}from"./chunks/framework.D0jgnAWi.js";const m=JSON.parse('{"title":"Comparing Rollwright to other component testing solutions","description":"","frontmatter":{},"headers":[],"relativePath":"comparison.md","filePath":"comparison.md"}'),a={name:"comparison.md"},r=o('<h1 id="comparing-rollwright-to-other-component-testing-solutions" tabindex="-1">Comparing Rollwright to other component testing solutions <a class="header-anchor" href="#comparing-rollwright-to-other-component-testing-solutions" aria-label="Permalink to &quot;Comparing Rollwright to other component testing solutions&quot;">â€‹</a></h1><p>Rollwright does not invent anything new. Many existing and established testing solutions provide a way to write integration level tests for UI components of different frameworks. This guide explains the difference in implementation and motiovation between Rollwright and other known solutions.</p><p>This guide does not attempt to convince anyone to only use Rollwright, rather sheds the light on the difference in approach and implementation so you can make a concious decision that works for your project.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>ðŸš§ This guide is under construction and will be updated as more insights are discovered.</p></div><h2 id="testing-library" tabindex="-1">Testing Library <a class="header-anchor" href="#testing-library" aria-label="Permalink to &quot;Testing Library&quot;">â€‹</a></h2><p>If you ever looked up any guide or recommendation, <a href="https://testing-library.com" target="_blank" rel="noreferrer">Testing Library</a> seem to be the most popular choice out there when it comes to testing UI components. Accompanied by <a href="https://jestjs.io" target="_blank" rel="noreferrer">Jest</a> or <a href="https://github.com/avajs/ava" target="_blank" rel="noreferrer">Ava</a>, you get a quick and easy setup that mostly just works.</p><p>However, if you are a seasoned engineer and you have experience with this approach that goes beyond testing HelloWorld component, you know it&#39;s not an easy path. JSDOM&#39;s lagging compatibility with the Web standards, Jest&#39;s inability to work with ESM packages in <code>node_modules</code>, Testing LIbrary spewing large chunks of HTML whenever something goes wrong, etc.</p><p>These are the issues that you&#39;re unable to hit when testing in real browser. This is where Rollwright (and of course Playwright) comes into play.</p><h2 id="playwright-ct" tabindex="-1">Playwright CT <a class="header-anchor" href="#playwright-ct" aria-label="Permalink to &quot;Playwright CT&quot;">â€‹</a></h2><p>Playwright itself does allow <a href="https://playwright.dev/docs/test-components" target="_blank" rel="noreferrer">component testing</a>.</p><p>It has been almost two years since Playwright got necessary capabilities to write tests for UI components. It is still in experimental status and mainly receives minor internal fixes from time to time. The experimental status means that the APIs do not follow semantic versioning and are a subject to breaking changes.</p><p>Playwright CT uses Vite under the hood to build all assets required by tests.</p><ul><li>experimental status</li><li>build time</li><li>api constraints (either build time code or evaluate() that doesn&#39;t go through build pipeline)</li><li>code coverage story</li></ul><h2 id="vitest" tabindex="-1">Vitest <a class="header-anchor" href="#vitest" aria-label="Permalink to &quot;Vitest&quot;">â€‹</a></h2><p><a href="https://vitest.dev" target="_blank" rel="noreferrer">Vitest</a> has <a href="https://vitest.dev/guide/browser.html" target="_blank" rel="noreferrer">an option</a> to run tests in browser.</p><ul><li>experimental, but nice it uses playwright</li><li>difference between running test in browser and testing in browser</li><li>plenty of unresolved issues with coverage and CI</li></ul><h2 id="webdriverio" tabindex="-1">WebdriverIO <a class="header-anchor" href="#webdriverio" aria-label="Permalink to &quot;WebdriverIO&quot;">â€‹</a></h2><ul><li>like vitest, runs tests themselves in browser</li><li>autowaiting disabled by default</li></ul>',18),n=[r];function s(l,h,c,d,p,g){return i(),t("div",null,n)}const b=e(a,[["render",s]]);export{m as __pageData,b as default};
