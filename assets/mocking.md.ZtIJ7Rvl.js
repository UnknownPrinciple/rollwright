import{_ as e,c as t,o as i,a4 as n}from"./chunks/framework.D0jgnAWi.js";const u=JSON.parse('{"title":"Mocking","description":"","frontmatter":{},"headers":[],"relativePath":"mocking.md","filePath":"mocking.md"}'),o={name:"mocking.md"},a=n('<h1 id="mocking" tabindex="-1">Mocking <a class="header-anchor" href="#mocking" aria-label="Permalink to &quot;Mocking&quot;">â€‹</a></h1><p>Mocking, stubbing or faking things in Playwright tests is not an easy thing. Mainly because Playwright tests itself running in Node.js runtime, outside of the browser runtime that runs the actual code that&#39;s being tested. By using Rollwright, this constraint can be minimized.</p><p>Rollwright itself does not provide mocking primitives. Consider using existing proven and established projects like <a href="https://sinonjs.org" target="_blank" rel="noreferrer">Sinon</a>. Rollwright does not have a way to mock a certain module implementation. For this, use Rollup plugins like <a href="https://www.npmjs.com/package/@rollup/plugin-alias" target="_blank" rel="noreferrer"><code>@rollup/plugin-alias</code></a>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>ðŸš§ This guide is under construction</p></div>',4),s=[a];function r(c,l,g,d,p,h){return i(),t("div",null,s)}const _=e(o,[["render",r]]);export{u as __pageData,_ as default};
